@model List<MenuItem>;
@{
    ViewData["Title"] = "Menu Item Page";
}

<h1> MenuItems List</h1>
<hr />
<div class="column justify-content-center">
    <div class="row-12 row-md-8">
        <div class="input-group mb-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Search The smth..." autocomplete="off"
                autofocus="autofocus" required>
            <button id="searchButton" class="btn btn-primary">
                <span id="searchText">Search</span>
            </button>
        </div>
    </div>
</div>


@if (!Model.Any())
{
    <div class="no-menu-items">
        <img src="/images/sad-star.png" alt="No menu-items" class="sad-face" />
        <p>No menu-items available at the moment.</p>
    </div>
}
else
{
    <ol class="card-list">
        @foreach (var menuItem in Model)
    {

            <li class="menuItemContainer">
                <a class="nav-link" asp-controller="MenuItem" asp-action="MenuItemDetails" asp-route-menuItemId="@menuItem?.Id">

                    <div class="menuItemContainer-details">
                        <p><strong>Menu Item Name:</strong> @(menuItem?.Name ?? "UNKNOWN")</p>
                        <p><strong>Menu Item Description:</strong> @(menuItem?.Description ?? "UNKNOWN")</p>
                        <p><strong>Menu Item Price:</strong> @menuItem?.Price </p>
                        <div class="rating" data-rating="@menuItem.PopularityRate">
                            <span class="text-warning">
                                @for (var i = 0; i < menuItem.PopularityRate; i++)
                                {
                                    <i class="fas fa-star star"></i>
                                }
                                @if (menuItem.PopularityRate < 5)
                                {
                                    for (var j = menuItem.PopularityRate; j < 5; j++)
                                    {
                                        <i class="far fa-star star"></i>
                                    }
                                }
                            </span>
                            <span class="badge bg-secondary ms-2">@menuItem.PopularityRate</span>
                        </div>
                    </div>
                </a>
                <br>
                <div class="menu-item-actions">
                    @* <button class="update-btn btn-close-white" onclick="showUpdateForm('@menu-item!.Id')">Update</button> *@
                    <button class="delete-btn btn-danger" onclick="deleteMenuItem('@menuItem!.Id')">Delete</button>
                </div>
            </li>
        }
    </ol>
}

@section Scripts {
<script>

    document.getElementById('searchButton').addEventListener('click', function () {
        filterMenuItems();
    });

    document.getElementById('searchInput').addEventListener('keyup', function (event) {
        if (event.key === 'Enter') {
            filterMenuItems();
        }
    });

    function filterMenuItems() {
        var input = document.getElementById('searchInput').value.toLowerCase();
        var items = document.querySelectorAll('.menuItemContainer');

        items.forEach(function (item) {
            var menuitemName = item.querySelector('menuItemContainer-details p').textContent.split(':')[1]?.trim().toLowerCase() || '';
            if (menuitemName.includes(input)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    </script>
<script>


    function showUpdateForm(id) {
        fetchMenuItemAndUpdateForm(id);
    }

    function fetchMenuItemAndUpdateForm(id) {
        fetch(`/MenuItem/Json/${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch menu-item.');
                }
                return response.json();
            })
            .then(data => {
                updateFormWithMenuItemData(data);
            })
            .catch(error => console.error('Error fetching menu-item:', error));
    }

    function updateFormWithMenuItemData(data) {
        document.getElementById('menu-itemId').value = data.id;
        document.getElementById('newName').value = data.name;
        document.getElementById('updateForm').style.display = 'block';
    }

    function hideUpdateForm() {
        document.getElementById('updateForm').style.display = 'none';
    }

    function updateMenuItem() {
        const menu-itemId = document.getElementById('menu-itemId').value;
        const name = document.getElementById('newName').value;

        const updatedMenuItem = {
            id: menu - itemId,
            name: name
        };

        fetch(`/MenuItem`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedMenuItem)
        })
            .then(response => {
                if (response.ok) {
                    alert('MenuItem updated successfully!');
                    hideUpdateForm();
                    window.location.reload();
                } else {
                    alert('Failed to update menu-item.');
                }
            })
            .catch(error => console.error('Error updating menu-item:', error));
    }
    
    </script>
<script>

    function deleteMenuItem(id) {
        if (confirm('Are you sure you want to delete this menu-item?')) {
            fetch(`/MenuItem/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        alert('MenuItem deleted successfully!');
                        window.location.reload();
                    } else {
                        alert('Failed to delete menu-item.');
                    }
                });
        }
    }
</script>
}
<style>
    h1 {
        color: #333;
    }

    .btn-modern {
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-modern:hover {
        background-color: #218838;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    input[type="email"],
    select,
    textarea {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
    }

    button:hover {
        background-color: #4cae4c;
    }

    .card-list {
        list-style-type: none;
        padding: 0;
    }

    .no-menu-items {
        text-align: center;
        margin-top: 20px;
    }

    .no-menu-items img.sad-face {
        width: 100px;
        height: 100px;
    }

    .no-menu-items p {
        font-size: 18px;
        color: #888;
    }

    .menuItemContainer {
        background-color: #cfe2f3;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 20px;
        transition: transform 0.3s ease-in-out;
        position: relative;
    }

    .menuItemContainer:hover {
        transform: translateY(-5px);
    }

    .menuItemContainer-details p {
        margin: 0;
        font-size: 16px;
        line-height: 1.6;
        font-weight: 550;
        color: #333;
    }

    .menuItemContainer-details p strong {
        font-weight: bold;
        color: #666;
    }

    .menu-item-actions {
        flex-shrink: 0;
    }

    .menuItemContainer hr {
        margin: 10px 0;
        border: none;
        border-top: 1px solid #e0e0e0;
    }
</style>