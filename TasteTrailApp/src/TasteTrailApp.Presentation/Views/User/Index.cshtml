@model IEnumerable<UserViewModel>

@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Views/Shared/_LayoutServices.cshtml";
    var Id = User.FindFirstValue("Id");

}


<h1>Users List</h1>
<hr />

<div class="col mb-3">
    <div class="row-col-auto">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by name or email" id="searchString"
                onkeypress="handleKeyPress(event)">
            <button type="button" class="btn btn-outline-primary" onclick="searchUsers()">Search</button>
        </div>
    </div>
</div>

@if (!Model.Any())
{
    <div class="text-center">
         <p>No users available at the moment.</p>
    </div>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-md-2 g-4" id="userList">
            @foreach (var viewData in Model)
            {
                @if (Id == viewData.User.Id.ToString()) { continue; }

                <div class="col user-card">
                    <div class="card mb-3 w-100 h-100">
                        <div class="row g-0 h-100">
                            <div class="col-md-4 m-1">
                                <img src="@(viewData.User.AvatarPath ?? "../images/user.png")"
                                    class="img-fluid rounded-start w-100 h-100 object-fit-cover" alt="User Avatar">
                            </div>
                            <div class="col-md-4">
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@viewData.User.UserName</h5>
                                    <p class="card-text"><strong>Role:</strong> @viewData.Role</p>
                                    <div class="mt-auto d-flex justify-content-between">
                                        <div>
                                            <a class="btn btn-primary" asp-controller="User" asp-action="UserInfo"
                                                asp-route-userId="@viewData.User.Id">View</a>
                                            <button class="btn btn-warning m-2"
                                                onclick="showUpdateForm('@viewData.User.Id')">Update</button>
                                            <button class="btn btn-danger"
                                                onclick="banUser('@viewData.User.Id', '@viewData.User.IsBanned')">@(viewData.User.IsBanned ? "Unban" : "Ban")</button>
                                            <button class="btn btn-secondary m-2"
                                                onclick="toggleMuteUser('@viewData.User.Id', '@viewData.User.IsMuted')">@(viewData.User.IsMuted ? "Unmute" : "Mute")</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
<div id="updateForm" class="update-form mt-5" style="display:none;">
    <div class="card">
        <h3 class="card-header">Update User</h3>
        <input type="hidden" id="userId">
        <div class="card-body">
            <div class="mb-3">
                <label for="newName" class="form-label">Name:</label>
                <input type="text" id="newName" class="form-control" disabled>
            </div>
            <div class="mb-3">
                <label for="newUserRole">Role:</label>
                <select id="newUserRole" class="form-select" aria-label="Select Role">
                    @foreach (UserRoles role in Enum.GetValues(typeof(UserRoles)))
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <button type="button" class="btn btn-success" onclick="updateUser()">Save</button>
                <button type="button" class="btn btn-secondary" onclick="hideUpdateForm()">Cancel</button>
            </div>
        </div>
    </div>
</div>

<script>
    function stringToBool(str) {
        return str.toLowerCase() === 'true';
    }

    function toggleMuteUser(userId, isMuted) {
        const muted = stringToBool(isMuted)

        const action = muted ? 'Unmute' : 'Mute';
        if (confirm(`Are you sure you want to ${action.toLowerCase()} this user?`)) {
            fetch(`/User/ToggleMute/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    alert(`User ${action.toLowerCase()}d successfully!`);
                    window.location.reload();
                } else {
                    alert(`Failed to ${action.toLowerCase()} user.`);
                }
            })
            .catch(error => console.error('Error toggling mute:', error));
        }
    }
 

    function showUpdateForm(id) {
        fetchUserAndUpdateForm(id);
    }

    function fetchUserAndUpdateForm(id) {
        fetch(`/User/Json/${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch user.');
                }
                return response.json();
            })
            .then(data => {
                updateFormWithUserData(data);
            })
            .catch(error => console.error('Error fetching user:', error));
    }

    function updateFormWithUserData(data) {
        document.getElementById('userId').value = data.id;
        document.getElementById('newUserRole').value = data.role;
        document.getElementById('newName').value = data.name;
        document.getElementById('updateForm').style.display = 'block';
    }

    function hideUpdateForm() {
        document.getElementById('updateForm').style.display = 'none';
    }

    function updateUser() {
        const userId = document.getElementById('userId').value;
        const role = document.getElementById('newUserRole').value;
        const name = document.getElementById('newName').value;

        const updatedUser = {
            role: role,
            name: name
        };

        fetch(`/User/AssignRole?userId=${userId}&role=${role}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedUser)
        })
            .then(response => {
                if (response.ok) {
                    alert('User updated successfully!');
                    hideUpdateForm();
                    window.location.reload();
                } else {
                    alert('Failed to update user.');
                }
            })
            .catch(error => console.error('Error updating user:', error));
    }

    function banUser(userId, isBanned) {
        const banned = stringToBool(isBanned)

        const action = banned ? 'Unban' : 'Ban';

        if (confirm(`Are you sure you want to ${action.toLowerCase()} this user?`)) {
            fetch(`/User/ToggleBan/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        alert(`User ${action.toLowerCase()} successfully!`);
                        window.location.reload();
                    } else {
                        alert(`Failed to ${action.toLowerCase()} user.`);
                    }
                });
        }
    }
</script>
<script>

    function searchUsers() {
        const searchString = document.getElementById('searchString').value.trim().toLowerCase();
        const userCards = document.querySelectorAll('.user-card');

        userCards.forEach(card => {
            const userName = card.querySelector('.card-title').textContent.trim().toLowerCase();
            const userEmail = card.querySelector('.card-text').textContent.trim().toLowerCase();

            if (userName.includes(searchString) || userEmail.includes(searchString)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
    }

    function handleKeyPress(event) {
        if (event.keyCode === 13) {
            // Enter press
            searchUsers();
        }
    }

</script>

<style>
    .update-form {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-40%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        display: none;
        z-index: 1000;
        width: 400px;
    }
</style>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}